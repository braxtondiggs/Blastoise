name: Dependency Updates

on:
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Monday at 8 AM UTC
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for Angular Updates
        run: |
          npx @angular/cli@latest update --dry-run --verbose || true

      - name: Check for npm Updates
        run: |
          npm outdated || true
          cd functions && npm outdated || true

      - name: Security Audit
        run: |
          echo "=== Main Project Security Audit ==="
          npm audit || true
          echo ""
          echo "=== Functions Security Audit ==="
          cd functions && npm audit || true

      - name: Create Issue for Updates
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              const outdated = execSync('npm outdated --json', { encoding: 'utf8', cwd: process.cwd() });
              const outdatedFunctions = execSync('npm outdated --json', { encoding: 'utf8', cwd: 'functions' });
              
              const mainOutdated = outdated ? JSON.parse(outdated) : {};
              const funcOutdated = outdatedFunctions ? JSON.parse(outdatedFunctions) : {};
              
              if (Object.keys(mainOutdated).length > 0 || Object.keys(funcOutdated).length > 0) {
                const title = `ðŸ“¦ Weekly Dependency Update - ${new Date().toISOString().split('T')[0]}`;
                const body = `## ðŸ“¦ Weekly Dependency Check
                
                This is an automated weekly check for dependency updates.
                
                ### Main Application Updates
                ${Object.keys(mainOutdated).length > 0 ? 
                  Object.entries(mainOutdated).map(([pkg, info]) => 
                    `- **${pkg}**: ${info.current} â†’ ${info.latest}`
                  ).join('\n') : 
                  'âœ… All dependencies are up to date'
                }
                
                ### Firebase Functions Updates  
                ${Object.keys(funcOutdated).length > 0 ?
                  Object.entries(funcOutdated).map(([pkg, info]) => 
                    `- **${pkg}**: ${info.current} â†’ ${info.latest}`
                  ).join('\n') :
                  'âœ… All dependencies are up to date'
                }
                
                ### Recommended Actions
                1. Review the updates above
                2. Test updates in a feature branch first
                3. Pay special attention to major version updates
                4. Run the full test suite after updates
                
                ### Commands to Update
                \`\`\`bash
                # Update main dependencies
                npm update
                
                # Update function dependencies
                cd functions && npm update && cd ..
                
                # For Angular updates, use:
                ng update @angular/cli @angular/core
                \`\`\`
                `;
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['dependencies', 'maintenance']
                });
              }
            } catch (error) {
              console.log('No outdated dependencies or error checking:', error.message);
            }
